<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.devit.repository.LectureRepository">
	<!-- 대표 프로젝트 관련 -->
	<!-- common id 생성 및 key value 반환 -->
	<insert id="insertCommonId" useGeneratedKeys="true" keyProperty="commonId" parameterType="Common">
		INSERT INTO lecture_common VALUES()
	</insert>
	
	<!-- 더미 프로젝트 생성 및 반환 -->
	<insert id="insertLecture" useGeneratedKeys="true" keyProperty="lectureId" parameterType="LectureOneResponse">
		INSERT INTO lecture(user_id, common_id)
		VALUES(#{userId}, #{commonId});
		
		SELECT @lectureId := max(lecture_id) FROM lecture;
		
		INSERT INTO lecture_auth(lecture_id, user_id, lecture_role)
		VALUES(@lectureId, #{userId}, 'owner')
	</insert>
	
	<!-- 대표 프로젝트 목록 받아오기  -->
	<select id="selectLectures" resultType="LecturesResponse">
		SELECT 
		    l.lecture_id lectureId,
		    l.title,
		    l.user_id userId,
		    l.common_id commonId,
		    l.view_count viewCount,
		    l.thumbnail_Url thumbnailUrl,
		    u.nickname,
		    COUNT(lsi.sub_id) lectureCount,
		    l.view_count viewCount,
		    IFNULL(likeCount, 0) AS likeCount,
		    lt.tagName,
		    CASE
		        WHEN lk.lecture_id IS NULL THEN FALSE
		        ELSE TRUE
		    END AS userLikeYn
		FROM
		    lecture l
		        LEFT OUTER JOIN
		    user u ON l.user_id = u.user_id
		        LEFT OUTER JOIN
		    lecture_sub_index lsi ON l.lecture_id = lsi.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id, COUNT(1) AS likeCount
		    FROM
		        lecture_like
		    WHERE
		        like_flag = 'Y'
		    GROUP BY lecture_id) ll ON l.lecture_id = ll.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        common_id, GROUP_CONCAT(tag_name) tagName
		    FROM
		        lecture_tag
		    GROUP BY common_id) lt ON l.common_id = lt.common_id
		        LEFT OUTER JOIN
		    (SELECT 
		        *
		    FROM
		        lecture_like
		    WHERE
		        user_id = #{userId} AND like_flag = 'Y') lk ON lk.lecture_id = l.lecture_id
		WHERE
		    l.type = ${type}
		GROUP BY l.lecture_id
		ORDER BY l.lecture_id
		LIMIT #{startPage}, 20;
	</select>
	
	<!-- 대표 프로젝트 상세 정보 -->
	<select id="selectLectureByLectureId" resultType="LectureOneResponse">
		SELECT 
		    l.lecture_id lectureId,
		    l.title,
		    l.user_id userId,
		    l.common_id commonId,
		    l.content,
		    l.thumbnail_url thumbnailUrl,
		    u.nickname,
		    l.created,
		    COUNT(lsi.sub_id) lectureCount,
   		    l.view_count viewCount,
			ifnull(likeCount, 0) likeCount,
		    lt.tagName,
		    CASE
		        WHEN lk.lecture_id IS NULL THEN FALSE
		        ELSE TRUE
		    END AS userLikeYn
		FROM
		    lecture l
		        LEFT OUTER JOIN
		    user u ON l.user_id = u.user_id
		        LEFT OUTER JOIN
		    lecture_sub_index lsi ON l.lecture_id = lsi.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id, count(1) AS likeCount
		    FROM
		        lecture_like
		    WHERE
		        lecture_id = #{lectureId} AND like_flag = 'Y'
            ) ll ON
            l.lecture_id = ll.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        common_id, GROUP_CONCAT(tag_name) tagName
		    FROM
		        lecture_tag
		    GROUP BY common_id) lt ON l.common_id = lt.common_id
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id
		    FROM
		        lecture_like
		    WHERE
		        user_id = #{userId} AND like_flag = 'Y'
			) lk
            ON lk.lecture_id = l.lecture_id
		WHERE
		    l.lecture_id = #{lectureId}
		GROUP BY l.lecture_id
		ORDER BY l.lecture_id;
	</select>
	
	<!-- 프로젝트 기본 정보 수정 -->
	<update id="updateFoundationLecture">
		UPDATE lecture
		SET
			title = #{title},
			thumbnail_url = #{thumbnailUrl},
			type = #{type},
			modified = now()
		WHERE lecture_id = #{lectureId};
	</update>
	
	<!-- Tag 삽입하기 -->
	<insert id="insertTags">
		DELETE FROM lecture_tag WHERE common_id = #{commonId};
		
		INSERT INTO lecture_tag(common_id, tag_name)
		VALUES
		<foreach collection="tags" item="tag" separator=", ">
			(#{commonId}, #{tag})
		</foreach>
	</insert>
	
	<!-- 프로젝트 기본 정보 수정 -->
	<update id="updateContentLecture">
		UPDATE lecture
		SET
			content = #{content},
			modified = now()
		WHERE lecture_id = #{lectureId}
	</update>
	
	<!-- 대표 프로젝트 관련 쿼리 끝 -->


	<!-- 소강의 관련 쿼리 -->
	<!-- 소강의 입력 -->
	<insert id="insertSubLecture">
		INSERT INTO lecture_sub_index(lecture_id, user_id, modifier, common_id, title, lecture_sub_index.order)
		VALUES(#{lectureId}, #{userId}, #{userId}, #{commonId}, #{title}, #{order})
	</insert>
	
	<!-- 소강의 업데이트 -->
	<update id="updateSubLecture">
		UPDATE lecture_sub_index
		SET
			modifier = #{userId},
			title = #{title},
			lecture_sub_index.order = #{order},
			modified = now()
		WHERE sub_id = #{subId}
	</update>
	
	<!-- 소강의 관련 쿼리 끝 -->
	
	
	<!-- 누적 강의 수 -->
	<select id="getLectureSubCount" resultType="Integer">
		SELECT count(1) FROM lecture_sub_index
	</select>
	
	
	
	<!-- tags  -->
	<select id="selectTags" resultType="TagResponse">
		SELECT 
    		tag_id tagId, tag_name tagName, COUNT(1) tagCount
		FROM
		    lecture_tag
		GROUP BY tag_name
		ORDER BY tagCount DESC
		LIMIT 20;
	</select>
	
	<!-- 사용자가 좋아요를 눌렀는지 확인 -->
	<select id="checkLikeLectureByUserId" resultType="LikeDTO">
		SELECT 
		    COUNT(1) likeCount, like_flag likeFlag
		FROM
		    lecture_like
		WHERE
		    user_id = #{userId} AND lecture_id = #{lectureId};
	</select>
	
	<!-- 사용자가 좋아요를 누른 경험이 있다면 -->
	<update id="updateLikeLectureByUserId">
		UPDATE lecture_like 
		SET 
		    like_flag = #{likeFlag}, modified = now()
		WHERE
		    user_id = #{userId} AND lecture_id = #{lectureId}
	</update>
	
	<!-- 좋아요 등록하기 -->
	<insert id="insertLikeLectureByUserId">
		INSERT INTO lecture_like(user_id, lecture_id)
		VALUES(#{userId}, #{lectureId});
	</insert>
	
	<!-- 프로젝트 조회수 1증가 -->
	<update id="updateLectureViewCount">
		UPDATE lecture SET view_count = view_count+1
		WHERE lecture_id = #{lectureId};
	</update>
	
	<!-- 프로젝트 권한 생성 -->
	<insert id="insertAuthLecture">
		INSERT INTO lecture_auth(lecture_id, user_id, lecture_role)
		VALUES(#{lectureId}, #{userId}, #{role})
	</insert>
	
	<!-- 프로젝트에 포함된 공동 작업자 가져오기 -->
	<select id="selectRoleUsersByLectureId" resultType="LectureRoleUsersResponse">
		SELECT u.nickname, u.email, u.profile, la.lecture_role role, la.created, la.modified
		FROM user u
		INNER JOIN lecture_auth la
		ON
		u.user_id = la.user_id AND
		lecture_id = #{lectureId}
	</select>
	

</mapper>