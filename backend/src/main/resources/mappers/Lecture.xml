<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.devit.repository.LectureRepository">
	
	<!-- common id 생성 -->
	<insert id="insertCommonId">
		INSERT INTO lecture_common VALUES()
	</insert>
	
	<!-- common id 조회 -->
	<select id="selectCommonId" resultType="Integer">
		SELECT max(common_id) from lecture_common
	</select>
	
	<!-- 대표 프로젝트 생성 -->
	<!-- <insert id="insertLecture">
		INSERT INTO lecture(user_id, common_id, title, content, thumbnail_url, type)
		VALUES(#{userId}, #{commonId}, #{title}, #{content}, #{thumbnailUrl}, #{type})
	</insert>  -->
	
	<!-- 대표 더미 프로젝트 생성 -->
	<insert id="insertLecture">
		INSERT INTO lecture(user_id, common_id)
		VALUES(#{userId}, #{commonId})
	</insert>
	
	<!-- 대표 프로젝트 id 가져오기 -->
	<select id="selectLectureId" resultType="LectureOneResponse">
		SELECT
			lecture_id lectureId,
			user_id userId,
			common_id commonId
		FROM lecture WHERE common_id = #{commonId}
	</select>
	
	<!-- 대표 프로젝트  -->
	<select id="selectLectures" resultType="LecturesResponse">		
		SELECT 
		    l.lecture_id lectureId,
		    l.title,
		    l.user_id userId,
		    l.common_id commonId,
		    l.view_count viewCount,
		    l.thumbnail_Url thumbnailUrl,
		    u.nickname,
		    COUNT(lsi.sub_id) lectureCount,
		    l.view_count viewCount,
		    IFNULL(likeCount, 0) AS likeCount,
		    lt.tagName,
		    CASE
		        WHEN lk.lecture_id IS NULL THEN FALSE
		        ELSE TRUE
		    END AS userLikeYn
		FROM
		    lecture l
		        LEFT OUTER JOIN
		    user u ON l.user_id = u.user_id
		        LEFT OUTER JOIN
		    lecture_main_index lmi ON l.lecture_id = lmi.lecture_id
		        LEFT OUTER JOIN
		    lecture_sub_index lsi ON l.lecture_id = lsi.lecture_id
		        AND lmi.main_id = lsi.main_id
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id, COUNT(1) AS likeCount
		    FROM
		        lecture_like
		    WHERE
		        like_flag = 'Y'
		    GROUP BY lecture_id) ll ON l.lecture_id = ll.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        common_id, GROUP_CONCAT(tag_name) tagName
		    FROM
		        lecture_tag
		    GROUP BY common_id) lt ON l.common_id = lt.common_id
		        LEFT OUTER JOIN
		    (SELECT 
		        *
		    FROM
		        lecture_like
		    WHERE
		        user_id = #{userId} AND like_flag = 'Y') lk ON lk.lecture_id = l.lecture_id
		WHERE
		    l.type = ${type}
		GROUP BY l.lecture_id
		ORDER BY l.lecture_id
		LIMIT #{startPage} , 20;
		
	</select>
	
	<!-- Tag 삽입하기 -->
	<insert id="insertTags">
		INSERT INTO lecture_tag(common_id, tag_name)
		VALUES(#{commonId}, #{tagName})
	</insert>
	
	<!-- 누적 강의 수 -->
	<select id="getLectureSubCount" resultType="Integer">
		SELECT count(1) FROM lecture_sub_index
	</select>
	
	<!-- 대표 프로젝트 상세 정보 -->
	<select id="selectLectureByLectureId" resultType="LectureOneResponse">
		SELECT 
		    l.lecture_id lectureId,
		    l.title,
		    l.user_id userId,
		    l.common_id commonId,
		    l.content,
		    l.thumbnail_url thumbnailUrl,
		    u.nickname,
		    l.created,
		    COUNT(lsi.sub_id) lectureCount,
   		    l.view_count viewCount,
			ifnull(ll.likeCount, 0) likeCount,
		    lt.tagName,
		    CASE
		        WHEN lk.lecture_id IS NULL THEN FALSE
		        ELSE TRUE
		    END AS userLikeYn
		FROM
		    lecture l
		        LEFT OUTER JOIN
		    user u ON l.user_id = u.user_id
		        LEFT OUTER JOIN
		    lecture_main_index lmi ON l.lecture_id = lmi.lecture_id
		        LEFT OUTER JOIN
		    lecture_sub_index lsi ON l.lecture_id = lsi.lecture_id
		        AND lmi.main_id = lsi.main_id
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id, count(1) AS likeCount
		    FROM
		        lecture_like
		    WHERE
		        lecture_id = #{lectureId} AND like_flag = 'Y') ll ON l.lecture_id = ll.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        common_id, GROUP_CONCAT(tag_name) tagName
		    FROM
		        lecture_tag
		    GROUP BY common_id) lt ON l.common_id = lt.common_id
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id
		    FROM
		        lecture_like
		    WHERE
		        user_id = #{userId}
		            AND like_flag = 'Y') lk ON lk.lecture_id = l.lecture_id
		WHERE
		    l.lecture_id = #{lectureId}
		GROUP BY l.lecture_id
		ORDER BY l.lecture_id;
	</select>
	
	<!-- tags  -->
	<select id="selectTags" resultType="TagResponse">
		SELECT 
    		tag_id tagId, tag_name tagName, COUNT(1) tagCount
		FROM
		    lecture_tag
		GROUP BY tag_name
		ORDER BY tagCount DESC
		LIMIT 20;
	</select>
	
	<!-- 사용자가 좋아요를 눌렀는지 확인 -->
	<select id="checkLikeLectureByUserId" resultType="LikeDTO">
		SELECT 
		    COUNT(1) likeCount, like_flag likeFlag
		FROM
		    lecture_like
		WHERE
		    user_id = #{userId} AND lecture_id = #{lectureId} AND like_type = #{likeType};
	</select>
	
	<!-- 사용자가 좋아요를 누른 경험이 있다면 -->
	<update id="updateLikeLectureByUserId">
		UPDATE lecture_like 
		SET 
		    like_flag = #{likeFlag}
		WHERE
		    user_id = #{userId} AND lecture_id = #{lectureId} AND like_type = #{likeType};
	</update>
	
	<!-- 좋아요 등록하기 -->
	<insert id="insertLikeLectureByUserId">
		INSERT INTO lecture_like(user_id, lecture_id, like_type)
		VALUES(#{userId}, #{lectureId}, #{likeType});
	</insert>
	
	<!-- 프로젝트 조회수 1증가 -->
	<update id="updateLectureViewCount">
		UPDATE lecture SET view_count = view_count+1
		WHERE lecture_id = #{lectureId};
	</update>
	
	<!-- 프로젝트 기본 정보 수정 -->
	<update id="updateFoundationLecture">
		UPDATE lecture
		SET
			title = #{title},
			thumbnail_url = #{thumbnailUrl},
			type = #{type}
		WHERE lecture_id = #{lectureId}
	</update>
	
		<!-- 프로젝트 기본 정보 수정 -->
	<update id="updateContentLecture">
		UPDATE lecture
		SET
			content = #{content}
		WHERE lecture_id = #{lectureId}
	</update>
</mapper>