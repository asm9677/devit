<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.devit.repository.UserRepository">
	
	<!-- 회원상세 -->
	<select id="findUsers" resultType="UserResponse">
		select user_id as userId, nickname, email, active, created, deleted, email_confirm emailConfirm, profile from user
	</select>
	
	<!-- 사용자 Email로 검색 -->
	<select id="findUserByUserEmail" resultType="User">
		select user_id as userId, nickname, email, password, active, created, deleted
		from user
		where email = #{email}
	</select>
	
	<!-- 사용자 user_id로 검색 -->
	<select id="findUserByUserId" resultType="User">
		select user_id as userId, nickname, email, active, created, deleted, email_confirm emailConfirm, profile
		from user
		where user_id = #{userId}
	</select>
	
	<!-- 사용자 nickname로 검색 -->
	<select id="findUserByNickname" resultType="User">
		select user_id as userId, nickname, email, password, active, created, deleted
		from user
		where nickname = #{nickname}
	</select>
	
	<!-- 사용자 등록  -->
	<insert id="insertUser">
		insert into user(email, nickname, password)
		values(#{email}, #{nickname}, #{password})
	</insert>
	
	<!-- 사용자 권한 검색 -->
	<select id="findRoles" resultType="String">
		select user_role
		from user_role
		where user_id = #{userId}
	</select>
	
	<!-- 사용자 권한 입력 -->
	<insert id="insertRole" parameterType="map">
		insert into user_role
		values(#{userId}, #{role})
	</insert>
	
	<!-- like 닉네임 으로 사용자 검색 -->
	<select id="findUsersByLikeSearchText" resultType="UserResponse">
		SELECT 
		    a.user_id userId, a.nickname, a.email, a.profile
		FROM
		    (SELECT user_id, nickname, email, nickname AS val, profile
		    FROM user
		    WHERE
		        UPPER(nickname) LIKE CONCAT(UPPER(#{search}), '%')
		    UNION ALL
		    SELECT user_id, nickname, email, email AS val, profile
		    FROM user
		    WHERE
		        UPPER(email) LIKE CONCAT(UPPER(#{search}), '%')
		    ) a
		WHERE
		    NOT EXISTS( SELECT 1
		        FROM lecture_auth la
		        WHERE la.user_id = a.user_id  AND la.lecture_id = #{lectureId})
		GROUP BY a.user_id , a.nickname , a.email
		ORDER BY a.val
		LIMIT 0 , 10;
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateUserInfo">
		UPDATE user 
		SET 
		    nickname = if(#{modifyType}='nickname', #{nickname}, nickname),
		    profile = if(#{modifyType}='profile', #{profile}, profile),
		    password = if(#{modifyType}='password', #{newPassword}, password)
		WHERE
		    user_id = #{userId};
	</update>
</mapper>